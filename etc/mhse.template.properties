### syntax: applicationName.propertyName
### ex: minhash.algorithmName
### MinHash ###
# if true, persist collision table
minhash.persistCollisionTable=True
# suggested number of threads to use
minhash.suggestedNumberOfThreads=-1
# graph input file path
minhash.inputFilePath=/path/to/input/graph
# result output folder path
minhash.outputFolderPath=/path/to/output/folder/results
# if true, the input graph must be reordered by degree
minhash.reorder=
# if true, the input graph is the transpose version
minhash.transpose=
# if true is set, keep the isolated nodes
minhash.isolatedVertices=
# warning: if false is set, you must set minhash.inputFilePathSeedNode or minhash.nodeIDRange
minhash.isSeedsRandom=
# to have a list of acceptable names see class it.bigdatalab.algorithm.AlgorithmEnum
minhash.algorithmName=
# threshold for effective diameter
minhash.threshold=
# minhash direction of the messages. in or out
minhash.direction=
# number of seeds used for minhash algorithm
minhash.numSeeds=
# optional
# warning: automatically reset numSeeds property (replaced with length of nodeIDRange)
minhash.nodeIDRange=
# optional
# read seeds list and nodes list from an external json file at this path
minhash.inputFilePathSeedNode=
#### Properties for multiple tests ###
# number of test to execute, 1 is the default value
minhash.numTests=
# if true load graph in memory
minhash.inMemory=
# if true compute centrality
minhash.computeCentrality=
### EdgeList2WebGraph ###
edgeList2WebGraph.inputEdgelistFilePath=/path/to/input/edgelist
edgeList2WebGraph.outputFolderPath=/path/to/output/folder/webgraph
edgeList2WebGraph.fromJanusGraph=False
### WebGraph2EdgeList ###
webGraph2EdgeList.inputFilePath=/input/file/path
webGraph2EdgeList.outputFolderPath=/output/folder/path
### GroundTruths ###
# graph input file path
groundTruth.inputFilePath=/input/file/path
# result output folder path
groundTruth.outputFilePath=/output/folder/path
# number of threads to use
groundTruth.threadNumber=
# if true is set, keep the isolated nodes
groundTruth.isolatedVertices=
# if true load graph in memory
groundTruth.inMemory=
### HyperBall ###
# suggested number of threads to use
hyperball.suggestedNumberOfThreads=-1
# graph input file path
hyperball.inputFilePath=/path/to/input/graph
# result output folder path
hyperball.outputFolderPath=/path/to/output/folder/results
# number of seed
hyperball.log2m=
# if true is set, keep the isolated nodes
hyperball.isolatedVertices=
# threshold for effective diameter
hyperball.threshold=
# number of test to execute, 1 is the default value
hyperball.numTests=
# if true load graph in memory
hyperball.inMemory=
# hyperball direction of the messages. in or out
hyperball.direction=
### Seeds ###
# number of seeds to generate
seed.numSeeds=
# optional
# graph input file path
seed.inputFilePath=
# result output folder path
seed.outFolderPath=
# number of seeds list to generate
seed.numTest=
# if true is set, keep the isolated nodes
seed.isolatedVertices=
# if true load graph in memory
seed.inMemory=
### InOut Degree ###
# graph input file path
inoutdegree.inputFilePath=
# result output folder path
inoutdegree.outFolderPath=
# if true is set, keep the isolated nodes
inoutdegree.isolatedVertices=
# if true load graph in memory
inoutdegree.inMemory=