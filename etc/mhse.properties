### syntax: applicationName.propertyName
### ex: minhash.algorithmName

### MinHash ###
# suggested number of threads to use
minhash.suggestedNumberOfThreads=16
# graph input file path
minhash.inputFilePath=/home/antoniocruciani/Desktop/Research/MHSE/TESTVGB/wbgraphs/MHSE/new_graphs/hollywood-2009/hollywood-2009
test.minhash.inputOffsetPath = /path/to/input/offsetfile
# result output folder path
minhash.outputFolderPath=/home/antoniocruciani/Desktop/Research/MHSE/TESTVGB/wbgraphs/MHSE/new_graphs/
# if true, the input graph is the transpose version
minhash.transpose=False
# if true is set, keep the isolated nodes
minhash.isolatedVertices=True
# warning: if false is set, you must set minhash.inputFilePathSeedNode or minhash.nodeIDRange
minhash.isSeedsRandom=True
# to have a list of acceptable names see class it.bigdatalab.algorithm.AlgorithmEnum
minhash.algorithmName=MultithreadMHSEX
# threshold for effective diameter
minhash.threshold=0.9
# minhash direction of the messages. in or out
minhash.direction=out
# number of seeds used for minhash algorithm
minhash.numSeeds=256
# optional
# warning: automatically reset numSeeds property (replaced with length of nodeIDRange)
minhash.nodeIDRange=
# optional
# read seeds list and nodes list from an external json file at this path
minhash.inputFilePathSeedNode=
#### Properties for multiple tests ###
# number of test to be done, 1 is the default value
minhash.numTests=10
# if true load graph in memory
minhash.inMemory=True
minhash.reorder= False
### Webgraph Centrality ###
centrality.WebGraph = True
centrality.HyperBall = False
centrality.threadNumber = 16
centrality.inMemory = True
centrality.inputFilePath = /home/antoniocruciani/Desktop/Research/MHSE/TESTVGB/wbgraphs/cnr/cnr-2000
centrality.outputFolderPath = /home/antoniocruciani/Desktop/Research/MHSE/TESTVGB/wbgraphs/
### EdgeList2WebGraph ###
test.edgeList2WebGraph.inputEdgelistFilePath=/test/path/to/input/edgelist
test.edgeList2WebGraph.outputFolderPath=/test/path/to/output/folder/webgraph
test.edgeList2WebGraph.fromJanusGraph=False

### EdgeList2AdjacencyList
edgeList2AdjacencyList.inputEdgelistFilePath=/home/antoniocruciani/Desktop/TESTVGB/wbgraphs/holly/edgeToAdj/hollywood-2011.edgelist
edgeList2AdjacencyList.outputFolderPath=/home/antoniocruciani/Desktop/TESTVGB/wbgraphs/holly/edgeToAdj/
edgeList2AdjacencyList.fromJanusGraph=False
edgeList2AdjacencyList.degreeDistributionLabeling = False
### Compressed Instance ###
compressInstance.inputAdjListPath = /home/antoniocruciani/Desktop/Research/MHSE/TESTVGB/wbgraphs/hollywood-2011.adjlist
compressInstance.outputFolderPath =  /home/antoniocruciani/Desktop/
compressInstance.separator = \t
# If true applies differential compression (d-gap compression)
compressInstance.GapCompression = False
# if true applies VarintGB compression (group varint)
compressInstance.VarintGB = False
compressInstance.EliasFano = True

compressInstance.inputOffsetCompressedAdjList = /input/file/path
## This .transposed has a bug need to be fixed
compressInstance.transposed = False

# WebGraph or Compressed Graph
graph.webGraph = True
graph.compressedGraph = False
graph.differentialCompression = False
graph.EliasFano = False
### WebGraph2EdgeList ###
webGraph2EdgeList.inputFilePath=  /home/antoniocruciani/Desktop/TESTVGB/wbgraphs/holliwood2011/hollywood-2011
webGraph2EdgeList.outputFolderPath=/home/antoniocruciani/Desktop/TESTVGB/wbgraphs/holly/edgeToAdj/
### Webgraph2AdjacencyList
WebGraph2AdjcencyList.inputFilePath = /home/antoniocruciani/Desktop/TESTVGB/wbgraphs/holliwood2011/hollywood-2011
WebGraph2AdjcencyList.outputFolderPath = /home/antoniocruciani/Desktop/TESTVGB/wbgraphs/holly/
### GroundTruths ###
# graph input file path
test.groundTruth.inputFilePath=/test/path/to/input/graph
# result output folder path
test.groundTruth.outputFilePath=/test/output/folder/path
# number of threads to use
test.groundTruth.threadNumber=4
# if true is set, keep the isolated nodes
test.groundTruth.isolatedVertices=
# if true load graph in memory
test.groundTruth.inMemory=True
### Seeds ###
# number of seeds to generate
test.seed.numSeeds=8
# optional
# graph input file path
test.seed.inputFilePath=/test/path/to/input/graph
# result output folder path
test.seed.outFolderPath=/test/output/folder/path
# number of seeds list to generate
test.seed.numTest=2
# if false is set, keep the isolated nodes
test.seed.isolatedVertices=False
# if true load graph in memory
test.seed.inMemory=True